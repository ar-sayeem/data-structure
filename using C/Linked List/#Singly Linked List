/// Singly Linked List
/// Create | Insert | Delete | Search

#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;               // Declaration of variable data of node.
    struct node *next;      // Self referential pointer *next(address of next node) of node.
} *head;                    // Object of node.

/// Create Linked List
void CreateList(int n)
{
    struct node *newNode, *temp;
    head = (struct node*) malloc (sizeof(struct node));     // Memory allocation for head(1st node).
    printf("Enter the value of Node-1:\n");
    scanf("%d", &head->data);       // Value of head node.
    head->next = NULL;              // Set head->next as NULL.
    temp = head;                    // Keep head in temp to traverse afterwards.

    // Using for-loop to traverse.
    for(int i=1; i<n; i++)
    {
        newNode = (struct node*) malloc (sizeof(struct node));    // Memory allocation for new nodes.
        printf("Enter the value of Node-%d\n", i+1);
        scanf("%d", &newNode->data);
        newNode->next = NULL;       // Address of last node is NULL.
        temp->next = newNode;       // Replace address of new node in temp.
        temp = newNode;             // Newly node is temp now.
    }
}

/// Insert at Begin
void InsertBegin()
{
    struct node *newNode;
    newNode = (struct node*) malloc (sizeof(struct node));
    printf("Enter the value you want insert at beginning:\n");
    scanf("%d", &newNode->data);
    newNode->next = head;
    head = newNode;
}

/// Insert at Middle / Any Position
void InsertMid(int position)
{
    struct node *newNode, *temp;
    temp = head;
    if (position == 1)
    {
        newNode->next = head;
        head = newNode;
    }
    else
    {
        temp = head;
        int count = 1;
        while (temp != NULL && count < position - 1)
        {
            temp = temp->next;
            count++;
        }
        if (temp == NULL)
        {
            printf("Invalid position.\n");
            exit(1);
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

/// Insert at End
void InsertEnd()
{
    struct node *newNode, *temp;
    temp = head;
    while(temp->next != NULL)
    {
        temp = temp->next;
    }
    newNode = (struct node*) malloc (sizeof(struct node));
    printf("Enter the value you want to insert at the end :\n");
    scanf("%d", &newNode->data);
    newNode->next = NULL;
    temp->next = newNode;
}

/// Display Linked List
void DisplayList()
{
    struct node *temp;
    temp = head;
    printf("\n#Display List#\n");
    while(temp != NULL)
    {
        printf("%d  ", temp->data);     // Display temp data.
        temp = temp->next;              // Temp->next is temp now.
    }
    printf("\n");
}

/// Main Function
int main()
{
    int n, pos;
    printf("How many elements?\n");
    scanf("%d", &n);                    // User input node number.
    CreateList(n);
    DisplayList();

    printf("\n");
    InsertBegin();
    DisplayList();
/*
    printf("\n");
    printf("Enter the position you want to add new node:\n");
    scanf("%d", &pos);
    InsertMid(pos);
    DisplayList();
*/
    printf("\n");
    InsertEnd();
    DisplayList();

    return 0;
}
